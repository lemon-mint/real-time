{"mappings":"iVAqBwDA,IAAJ,IAAAC,EAAAC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAA,GAArCG,EAAAA,EAAAA,EAAAA,OAAyC,IAAAC,EAArC,EAAJD,EAAOE,EAAAA,EAAAA,EAAAA,OAAkC,IAAAC,EAA9B,EAAJD,EAAOE,EAAAA,EAAAA,EAAAA,OAA2B,IAAAC,EAAvB,EAAJD,EAAOE,EAAAA,EAAAA,EAAAA,OAAoB,IAAAC,EAAhB,EAAJD,EAAOE,EAAAA,EAAAA,EAAAA,OAAa,IAAAC,EAAT,EAAJD,YAElCR,KAAAA,EAAIA,EACJE,KAAAA,EAAIA,EAEJE,KAAAA,EAAIA,EACJI,KAAAA,EAAIA,EACJF,KAAAA,EAAIA,EACJI,KAAAA,IAAMC,IACNC,KAAAA,EAAID;;;;;;;;;;8BASJE,MAAAA,SAAAA,GAAGC,IAAAA,EAAOjB,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAH,EAERkB,GAAAA,MAAMC,KAAKJ,GACRA,KAAAA,EAAK,EAAII,KAAKR,EAAKK,EACnBH,KAAAA,IAAO,EAAIM,KAAKR,EAAKQ,KAAKd,GAAK,EAAIc,KAAKR,OAE1C,CAGGS,IAAAA,EAAQD,KAAKE,QAAQJ,GACrBK,EAAUH,KAAKI,cAGfC,EAAIF,EAAUH,KAAKR,GAAK,GAAMQ,KAAKR,EAAIW,EAAUH,KAAKR,EAAKQ,KAAKd,IAGjEU,KAAAA,EAAIK,EAAQI,GAAKR,EAAKG,KAAKR,EAAIS,GAC/BP,KAAAA,IAAMS,EAAWE,EAAIL,KAAKR,EAAIW,EAG9B,OAAAH,KAAKJ,mBAQCU,MAAA,WAAPR,IAAAA,EAAOjB,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAH,EACF,OAAAmB,KAAKZ,EAAIY,KAAKJ,EAAMI,KAAKV,EAAIQ,uBAOzBQ,MAAA,WACH,OAAAN,KAAKZ,EAAIY,KAAKN,IAAOM,KAAKZ,EAAKY,KAAKhB,2BAO7BsB,MAAA,WACT,OAAAN,KAAKJ,+BAOMW,MAAAA,SAAAA,GACbrB,KAAAA,EAAIqB,2BAOKA,MAAAA,SAAAA,GACTvB,KAAAA,EAAIuB,wCClGb,MAAMC,EAASC,SAASC,eAAe,QACjCC,EAAWF,SAASC,eAAe,SACnCE,EAAWH,SAASC,eAAe,aACnCG,EAAOJ,SAASC,eAAe,UAGrC,IAAII,EAAqB,EACrBC,EAAsB,GACtBC,GAAqB,IAAIC,MAAOC,UAAYC,YAAYC,MACxDC,GAAsB,IAAIJ,MAAOK,iBAEjCC,EAAqB,yCAEhBC,IACP,OAAOL,YAAYC,MAAQJ,EAAaF,iBA+B3BW,IACb,MAAMC,EAAKF,IACLG,QAAiBC,MAAM,SACvBC,EAAKL,IACLM,QAAaH,EAASG,OAK5B,OAJWA,EAAKC,GAGKL,EAFVI,EAAKE,GAEeH,GAAM,iBAIxBI,EAAMC,GACnB,OAAO,IAAIC,SAASC,GAAYC,WAAWD,EAASF,oBAGvCI,EAASC,GAAkB,EAAOC,EAAqB,EAAKC,EAAkB,UACrFhB,IAEN,IAAIiB,EAAS,EACb,MAAMC,EAA0BF,EAC1BG,EAAK,IAAIC,EAAAC,IACf,IAAK,IAAIC,EAAI,EAAGA,EAAIJ,EAAyBI,IAAK,CAChDC,QAAQC,IAAI,gBAAkBF,GAC9BC,QAAQC,IAAI,6BACZ,MAAMC,QAAYzB,IACZ0B,EAAQP,EAAGQ,OAAOF,GACxBF,QAAQC,IAAI,kBAAoBC,GAEhCR,GAAUS,EACV5B,EAAa,qBAAuBmB,GAAUK,EAAI,IAAIM,QAAQ,GAAK,WAC7DpB,EAAM,IAGdS,GAAUC,EACVD,GAAUF,EAEVQ,QAAQC,IAAI,6BAA+BP,YAzCtBA,GACrB5B,GAA0B4B,EAyC1BY,CAAcZ,GACdnB,GAAmBC,KAAmB,IAAIP,MAAOC,WAAWmC,QAAQ,GAAK,KACrEd,IACFF,YAAUkB,gBACFjB,GAAS,EAAME,KACpB,KACHQ,QAAQC,IACN,wCACE,IAAIhC,KAAKO,IAAmB,KAAWF,mBApD/CkC,gCAtBSC,IACP,MAAMC,EAAOlC,IACPmC,EAAO,IAAI1C,KAAKyC,GACtBrC,EAAcsC,EAAKrC,iBACfd,EAAOoD,cAAgBvC,IACzBb,EAAOoD,YAAcvC,GAGnBN,GACFH,EAASiD,QAAS,EAClBlD,EAASmD,UAAY/C,GACXH,EAASiD,SACnBjD,EAASiD,QAAS,GAGhBhD,EAAK+C,cAAgBrC,IACvBV,EAAK+C,YAAcrC,GAGrBiC,sBAAsBC,qBA4DTM,IACb,IACEhD,EAAc,GACdQ,EAAa,gCACbyB,QAAQC,IAAI,qCACNxB,UACAQ,EAAM,WACNK,GAAS,EAAM,EAAK,IAC1BU,QAAQC,IAAI,mCACZ,MAAOe,GACPhB,QAAQiB,MAAMD,GACdjD,EAAciD,EAAEE,WAChB3C,EAAa,2CACbc,WAAW0B,EAAM,MAIrBA,GAAOI","sources":["node_modules/kalmanjs/src/kalman.js","src/index.ts"],"sourcesContent":["/**\n* KalmanFilter\n* @class\n* @author Wouter Bulten\n* @see {@link http://github.com/wouterbulten/kalmanjs}\n* @version Version: 1.0.0-beta\n* @copyright Copyright 2015-2018 Wouter Bulten\n* @license MIT License\n* @preserve\n*/\nexport default class KalmanFilter {\n\n  /**\n  * Create 1-dimensional kalman filter\n  * @param  {Number} options.R Process noise\n  * @param  {Number} options.Q Measurement noise\n  * @param  {Number} options.A State vector\n  * @param  {Number} options.B Control vector\n  * @param  {Number} options.C Measurement vector\n  * @return {KalmanFilter}\n  */\n  constructor({R = 1, Q = 1, A = 1, B = 0, C = 1} = {}) {\n\n    this.R = R; // noise power desirable\n    this.Q = Q; // noise power estimated\n\n    this.A = A;\n    this.C = C;\n    this.B = B;\n    this.cov = NaN;\n    this.x = NaN; // estimated signal without noise\n  }\n\n  /**\n  * Filter a new value\n  * @param  {Number} z Measurement\n  * @param  {Number} u Control\n  * @return {Number}\n  */\n  filter(z, u = 0) {\n\n    if (isNaN(this.x)) {\n      this.x = (1 / this.C) * z;\n      this.cov = (1 / this.C) * this.Q * (1 / this.C);\n    }\n    else {\n\n      // Compute prediction\n      const predX = this.predict(u);\n      const predCov = this.uncertainty();\n\n      // Kalman gain\n      const K = predCov * this.C * (1 / ((this.C * predCov * this.C) + this.Q));\n\n      // Correction\n      this.x = predX + K * (z - (this.C * predX));\n      this.cov = predCov - (K * this.C * predCov);\n    }\n\n    return this.x;\n  }\n\n  /**\n  * Predict next value\n  * @param  {Number} [u] Control\n  * @return {Number}\n  */\n  predict(u = 0) {\n    return (this.A * this.x) + (this.B * u);\n  }\n  \n  /**\n  * Return uncertainty of filter\n  * @return {Number}\n  */\n  uncertainty() {\n    return ((this.A * this.cov) * this.A) + this.R;\n  }\n  \n  /**\n  * Return the last filtered measurement\n  * @return {Number}\n  */\n  lastMeasurement() {\n    return this.x;\n  }\n\n  /**\n  * Set measurement noise Q\n  * @param {Number} noise\n  */\n  setMeasurementNoise(noise) {\n    this.Q = noise;\n  }\n\n  /**\n  * Set the process noise R\n  * @param {Number} noise\n  */\n  setProcessNoise(noise) {\n    this.R = noise;\n  }\n}\n","import KalmanFilter from 'kalmanjs';\r\n\r\nconst timeH1 = document.getElementById(\"time\");\r\nconst errorPre = document.getElementById(\"error\");\r\nconst errordiv = document.getElementById(\"error-div\");\r\nconst stat = document.getElementById(\"status\");\r\n\r\n\r\nlet timeOffset: number = 0;\r\nlet errorString: string = \"\";\r\nlet DOMTimeOff: number = new Date().getTime() - performance.now();\r\nlet displayTime: string = new Date().toLocaleString();\r\n\r\nlet statusText: string = \"Please wait, synchronizing...\";\r\n\r\nfunction getCurrentTime() {\r\n  return performance.now() + DOMTimeOff + timeOffset;\r\n}\r\n\r\nfunction updateTime() {\r\n  const time = getCurrentTime();\r\n  const date = new Date(time);\r\n  displayTime = date.toLocaleString();\r\n  if (timeH1.textContent !== displayTime) {\r\n    timeH1.textContent = displayTime;\r\n  }\r\n\r\n  if (errorString) {\r\n    errordiv.hidden = false;\r\n    errorPre.innerText = errorString;\r\n  } else if (!errordiv.hidden) {\r\n    errordiv.hidden = true;\r\n  }\r\n\r\n  if (stat.textContent !== statusText) {\r\n    stat.textContent = statusText;\r\n  }\r\n\r\n  requestAnimationFrame(updateTime);\r\n}\r\n\r\nrequestAnimationFrame(updateTime);\r\n\r\nfunction setTimeOffset(offset: number) {\r\n  timeOffset = timeOffset + offset;\r\n}\r\n\r\nasync function getServerOff(): Promise<number> {\r\n  const t0 = getCurrentTime();\r\n  const response = await fetch(\"/time\");\r\n  const t3 = getCurrentTime();\r\n  const json = await response.json();\r\n  const t1 = json.t1;\r\n  const t2 = json.t2;\r\n\r\n  const offset = (t1 - t0 + t2 - t3) / 2;\r\n  return offset;\r\n}\r\n\r\nasync function sleep(t: number) {\r\n  return new Promise((resolve) => setTimeout(resolve, t));\r\n}\r\n\r\nasync function syncTime(repeat: boolean = false, multiplier: number = 1.0, samples: number = 10) {\r\n  await getServerOff(); // Preheat\r\n\r\n  let offset = 0;\r\n  const TIME_SYNC_MEASURE_COUNT = samples;\r\n  const kf = new KalmanFilter();\r\n  for (let i = 0; i < TIME_SYNC_MEASURE_COUNT; i++) {\r\n    console.log(\"Measurement: \" + i);\r\n    console.log(\"Requesting time offset...\");\r\n    const off = await getServerOff();\r\n    const kfOff = kf.filter(off);\r\n    console.log(\"Server offset: \" + off);\r\n    //console.log(\"Kalman filter offset: \" + kfOff);\r\n    offset += kfOff;\r\n    statusText = \"Synchronizing... \" + (offset / (i + 1)).toFixed(5) + \"ms\";\r\n    await sleep(20);\r\n  }\r\n\r\n  offset /= TIME_SYNC_MEASURE_COUNT;\r\n  offset *= multiplier;\r\n\r\n  console.log(\"Synchronized time offset: \" + offset);\r\n  setTimeOffset(offset);\r\n  statusText = \"\" + (getCurrentTime() - new Date().getTime()).toFixed(5) + \"ms\";\r\n  if (repeat) {\r\n    setTimeout(async () => {\r\n      await syncTime(true, multiplier);\r\n    }, 1000 * 30);\r\n    console.log(\r\n      \"Next Synchronization is scheduled on \" +\r\n        new Date(getCurrentTime() + 1000 * 30).toLocaleString()\r\n    );\r\n  }\r\n}\r\n\r\nasync function main() {\r\n  try {\r\n    errorString = \"\";\r\n    statusText = \"Please wait, synchronizing...\";\r\n    console.log(\"Starting synchronization...\");\r\n    await getServerOff();\r\n    await sleep(500);\r\n    await syncTime(true, 1.0, 20);\r\n    console.log(\"Successfully synchronized time.\");\r\n  } catch (e) {\r\n    console.error(e);\r\n    errorString = e.toString();\r\n    statusText = \"Error occurred. Restarting in 5 seconds.\";\r\n    setTimeout(main, 5000);\r\n  }\r\n}\r\n\r\nmain().then();\r\n"],"names":["KalmanFilter","_ref","arguments","length","undefined","R","_ref$R","Q","_ref$Q","A","_ref$A","B","_ref$B","C","_ref$C","cov","NaN","x","z","u","isNaN","this","predX","predict","predCov","uncertainty","K","value","noise","$e04467055a32edce$var$timeH1","document","getElementById","$e04467055a32edce$var$errorPre","$e04467055a32edce$var$errordiv","$e04467055a32edce$var$stat","$e04467055a32edce$var$timeOffset","$e04467055a32edce$var$errorString","$e04467055a32edce$var$DOMTimeOff","Date","getTime","performance","now","$e04467055a32edce$var$displayTime","toLocaleString","$e04467055a32edce$var$statusText","$e04467055a32edce$var$getCurrentTime","$e04467055a32edce$var$getServerOff","t0","response","fetch","t3","json","t1","t2","$e04467055a32edce$var$sleep","t","Promise","resolve","setTimeout","$e04467055a32edce$var$syncTime","repeat","multiplier","samples","offset","TIME_SYNC_MEASURE_COUNT","kf","$parcel$interopDefault","$e2f3991120c975ef$exports","i","console","log","off","kfOff","filter","toFixed","$e04467055a32edce$var$setTimeOffset","async","requestAnimationFrame","$e04467055a32edce$var$updateTime","time","date","textContent","hidden","innerText","$e04467055a32edce$var$main","e","error","toString","then"],"version":3,"file":"index.3fb7c888.js.map"}